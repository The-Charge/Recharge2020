// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc.robot.Robot;

/**
 *
 */
public class VisionTest extends Command {
    private double[] result;
    private double setpoint;
    private double drivespeed;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public VisionTest() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        Robot.drivetrain.pidController.setTolerance(4);
        Robot.drivetrain.pidController.enableContinuousInput(-180, 180);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        result = SmartDashboard.getNumberArray("Vision/result", new double[] {0, 0});
        // Result key:
        //  0. timestamp
        //  1. success (0/1)
        //  2. distance
        //  3. horizontal angle
        //  4. vertical angle
        //  5. alignment angle
        //  6. inner port (0/1)
        //  7. instantaneous FPS

        if (result[1] == 1)  {
            setpoint = Robot.drivetrain.getGyroYaw() + result[3];
            if(setpoint < -180)  // ex: -190 -> 170
                setpoint += 360;
            else if(setpoint > 180)  // ex: 190 -> -170
                setpoint -= 360;
        }
        Robot.drivetrain.pidController.setSetpoint(setpoint);

        if (Robot.drivetrain.pidController.atSetpoint() && result[1] == 1) {
            SmartDashboard.putString("valid_shot", "locked");
        } else if (result[1] == 1) {
            SmartDashboard.putString("valid_shot", "in progress");
        } else {
            SmartDashboard.putString("valid_shot", "none");
        }

        drivespeed = Robot.drivetrain.pidController.calculate(Robot.drivetrain.getGyroYaw());
        Robot.drivetrain.run(-drivespeed, drivespeed);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
