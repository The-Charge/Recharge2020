// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc.robot.Robot;

/**
 *
 */
public class PowerCellPickup extends Command {
    private double[] result;
    private double setpoint;
    private double drivespeed;
    private double l, r;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public PowerCellPickup() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drivetrain);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        Robot.drivetrain.pidController.setTolerance(2);
        Robot.drivetrain.pidController.enableContinuousInput(-180, 180);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        result = SmartDashboard.getNumberArray("Vision/power_cell", new double[] {0});
        // Result key:
        //  0. success (0/1)
        //  1. angle
        //  2. distance

        if (result[0] == 1) {
            setpoint = Robot.drivetrain.getGyroYaw() + result[1];
            if(setpoint < -180)  // ex: -190 -> 170
                setpoint += 360;
            else if(setpoint > 180)  // ex: 190 -> -170
                setpoint -= 360;
        }
        Robot.drivetrain.pidController.setSetpoint(setpoint);

        drivespeed = Robot.drivetrain.pidController.calculate(Robot.drivetrain.getGyroYaw());
        l = (1 - drivespeed) / 2;
        r = (1 + drivespeed) / 2;
        Robot.drivetrain.run(l, r);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
