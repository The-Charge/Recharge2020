// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.commands;
import com.ctre.phoenix.motorcontrol.ControlMode;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.PIDCommand;
import frc.robot.Robot;
import frc.robot.subsystems.Drivetrain;



/**
 *
 */
public class TurnNDegreesRelativePID extends PIDCommand {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_targetAngle;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    private ControlMode previousControlMode;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public TurnNDegreesRelativePID(double targetAngle) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

        //These PID values need to be tuned
        super("TurnNDegreesRelativePID", 0.03, 0.0, 0.001, 0.02);
        getPIDController().setContinuous();
        getPIDController().setAbsoluteTolerance(0.2);
        getPIDController().setInputRange(-180.0, 180.0);
        getPIDController().setOutputRange(-0.05, 0.05);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_targetAngle = targetAngle;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drivetrain);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    @Override
    protected double returnPIDInput() {
        return Drivetrain.getGyroPID();
    }

    @Override
    protected void usePIDOutput(double output) {
        
        int sign = (int) Math.signum(output);
    	double minSpeed = 1;
        double finalOutput = sign * (Math.max(minSpeed, Math.abs(output)));
        
        Robot.drivetrain.writePIDs(finalOutput);
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        this.setTimeout(3);
    	previousControlMode = Robot.drivetrain.getControlMode();
		double initial = Drivetrain.getGyro().getAngle();
		Drivetrain.getGyro().setAngleAdjustment(-initial);
		//^^^ I think this essentially sets initial angle to 0; whenever it returns the current angle,
		//it adds -initial to it, then resets it when the turn is finished.
		getPIDController().setSetpoint(m_targetAngle);
		Robot.drivetrain.setControlMode(ControlMode.PercentOutput);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return isTimedOut() || getPIDController().onTarget();
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.drivetrain.stop();
        Drivetrain.getGyro().setAngleAdjustment(0);
        Robot.drivetrain.setControlMode(previousControlMode);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
