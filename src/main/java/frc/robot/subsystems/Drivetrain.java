// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import frc.robot.MathUtil;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Drivetrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    /*
private WPI_TalonFX rightFrontMotor;
private WPI_TalonFX rightMidMotor;
private WPI_TalonFX rightBackMotor;
private WPI_TalonFX leftFrontMotor;
private WPI_TalonFX leftMidMotor;
private WPI_TalonFX leftBackMotor;
*/
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    //Motors
    private WPI_TalonFX rightFrontMotor;
    private WPI_TalonFX rightMidMotor;
    private WPI_TalonFX rightBackMotor;
    private WPI_TalonFX leftFrontMotor;
    private WPI_TalonFX leftMidMotor;
    private WPI_TalonFX leftBackMotor;

    //PID Constants (all values still need to be changed, these are values for plybot)
    private static final double SPEED_P_CONSTANT = 0.25;
    private static final double SPEED_I_CONSTANT = 0.0001;   //lowered
    private static final double SPEED_D_CONSTANT = 0.0;
    private static final double SPEED_F_CONSTANT = 0.12;

    private static final int TIMEOUT_MS = 10;
    private static final int MAX_TICKS_PER_SECOND = 9000;   //Plybot = 9000   Sulfuric = 200000
    private static final int TICKS_PER_FOOT = 5270;    //Plybot = 5270   Sulfuric = 9560

    //Motion Magic (all values still need to be changed, these are values for plybot)
    public double MotionMagicP = .8; 
    public double MotionMagicI = 0.0;   
    public double MotionMagicD = 0.001;
    public double MotionMagicF = 0.65;
    public int MotionMagicAcceleration = 2500;  
    public int MotionMagicVelocity = 5000;
    public int MotionMagicPIDIndex = 0;
    public int MotionMagicPIDSlot = 0;
    public double MotionMagicDistance;
    //public double correctionR = 1.02;

    public int smoothing = 4;



    public Drivetrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    rightFrontMotor = new WPI_TalonFX(1);
    rightMidMotor = new WPI_TalonFX(2);
    rightBackMotor = new WPI_TalonFX(3);

    leftFrontMotor = new WPI_TalonFX(4);
    leftMidMotor = new WPI_TalonFX(5);
    leftBackMotor = new WPI_TalonFX(6);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


    //Motor for Plybot
    rightFrontMotor = new WPI_TalonFX(7);
    rightMidMotor = new WPI_TalonFX(8);
    rightBackMotor = new WPI_TalonFX(15);

    leftFrontMotor = new WPI_TalonFX(3);
    leftMidMotor = new WPI_TalonFX(2);
    leftBackMotor = new WPI_TalonFX(1);

    rightFrontMotor.setInverted(true);
    rightMidMotor.setInverted(true);
    rightBackMotor.setInverted(true);

    rightFrontMotor.setSensorPhase(false);    //inverts right encoder on Talon SRX

    leftMidMotor.follow(leftFrontMotor);
    leftBackMotor.follow(leftFrontMotor);
    rightMidMotor.follow(rightFrontMotor);
    rightBackMotor.follow(rightFrontMotor);
    
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.S
        setDefaultCommand(new TankDrive());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void run(double l, double r)
    {
        double leftSpeed = l;
        double rightSpeed = r;

        leftFrontMotor.set(leftSpeed);
        rightFrontMotor.set(rightSpeed);

    }

    public void stop()
    {
        leftFrontMotor.set(0);
        rightFrontMotor.set(0);
    }

    public void setPercentVBus()
    {
        leftFrontMotor.set(ControlMode.PercentOutput, 0);
        rightFrontMotor.set(ControlMode.PercentOutput, 0);
    }

    public void initSpeedMode()
    {
        leftFrontMotor.set(ControlMode.Velocity, 0);
        rightFrontMotor.set(ControlMode.Velocity, 0);

        //Assigned PID constants to the motors.
        leftFrontMotor.config_kP(1, SPEED_P_CONSTANT, TIMEOUT_MS);
        leftFrontMotor.config_kI(1, SPEED_I_CONSTANT, TIMEOUT_MS);
        leftFrontMotor.config_kD(1, SPEED_D_CONSTANT, TIMEOUT_MS);
        leftFrontMotor.config_kF(1, SPEED_F_CONSTANT, TIMEOUT_MS);

        rightFrontMotor.config_kP(1, SPEED_P_CONSTANT, TIMEOUT_MS);
        rightFrontMotor.config_kI(1, SPEED_I_CONSTANT, TIMEOUT_MS);
        rightFrontMotor.config_kD(1, SPEED_D_CONSTANT, TIMEOUT_MS);
        rightFrontMotor.config_kF(1, SPEED_F_CONSTANT, TIMEOUT_MS);
        
    }

    public void setPercentSpeedPID (double setSpeedL, double setSpeedR)
    {
        setSpeedR = MathUtil.clamp(setSpeedR, -1, 1);
        setSpeedL = MathUtil.clamp(setSpeedL, -1, 1);
        leftFrontMotor.set(ControlMode.Velocity, MAX_TICKS_PER_SECOND * setSpeedL);
        rightFrontMotor.set(ControlMode.Velocity, MAX_TICKS_PER_SECOND * setSpeedR);
    }
    
    //Motion Magic for DriveXFeet command
    public void MotionMagicInit(double distance) {
    	//rightFrontMotor.follow(leftFrontMotor);
    	
    	leftFrontMotor.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder, MotionMagicPIDIndex, TIMEOUT_MS);
    	rightFrontMotor.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder, MotionMagicPIDIndex, TIMEOUT_MS);
        

        //Setting min and max outputs (new code)
        leftFrontMotor.configNominalOutputForward(0, TIMEOUT_MS);
        leftFrontMotor.configNominalOutputReverse(0, TIMEOUT_MS);
        leftFrontMotor.configPeakOutputForward(1, TIMEOUT_MS);
        leftFrontMotor.configPeakOutputReverse(-1, TIMEOUT_MS);

        rightFrontMotor.configNominalOutputForward(0, TIMEOUT_MS);
        rightFrontMotor.configNominalOutputReverse(0, TIMEOUT_MS);
        rightFrontMotor.configPeakOutputForward(1, TIMEOUT_MS);
        rightFrontMotor.configPeakOutputReverse(-1, TIMEOUT_MS);

    	leftFrontMotor.selectProfileSlot(MotionMagicPIDSlot, MotionMagicPIDIndex);
    	rightFrontMotor.selectProfileSlot(MotionMagicPIDSlot, MotionMagicPIDIndex);
    	
    	leftFrontMotor.config_kP(0, MotionMagicP, TIMEOUT_MS);
    	leftFrontMotor.config_kI(0, MotionMagicI, TIMEOUT_MS);
    	leftFrontMotor.config_kD(0, MotionMagicD, TIMEOUT_MS);
    	leftFrontMotor.config_kF(0, MotionMagicF, TIMEOUT_MS);
    	
    	rightFrontMotor.config_kP(0, MotionMagicP, TIMEOUT_MS);
    	rightFrontMotor.config_kI(0, MotionMagicI, TIMEOUT_MS);
    	rightFrontMotor.config_kD(0, MotionMagicD, TIMEOUT_MS);
    	rightFrontMotor.config_kF(0, MotionMagicF, TIMEOUT_MS);
    	
    	leftFrontMotor.configMotionAcceleration(MotionMagicAcceleration, TIMEOUT_MS);
        leftFrontMotor.configMotionCruiseVelocity(MotionMagicVelocity, TIMEOUT_MS);
        
    	//rightFrontMotor.configMotionAcceleration((int)(correctionR*MotionMagicAcceleration), TIMEOUT_MS);
    	rightFrontMotor.configMotionAcceleration(MotionMagicAcceleration, TIMEOUT_MS);
    	rightFrontMotor.configMotionCruiseVelocity(MotionMagicVelocity, TIMEOUT_MS);
        
    	leftFrontMotor.setSelectedSensorPosition(0, MotionMagicPIDIndex, TIMEOUT_MS);
    	rightFrontMotor.setSelectedSensorPosition(0, MotionMagicPIDIndex, TIMEOUT_MS);


        //Smoothing factor
        leftFrontMotor.configMotionSCurveStrength(smoothing);
        rightFrontMotor.configMotionSCurveStrength(smoothing);

    	MotionMagicDistance = distance * TICKS_PER_FOOT;
        leftFrontMotor.set(ControlMode.MotionMagic, MotionMagicDistance);
        rightFrontMotor.set(ControlMode.MotionMagic, MotionMagicDistance);

    	//rightFrontMotor.set(ControlMode.MotionMagic, correctionR*MotionMagicDistance);
    }

    public boolean isAtPIDDestination() {
		return (Math.abs(this.leftFrontMotor.getSelectedSensorPosition(MotionMagicPIDIndex) - MotionMagicDistance) < 500) || (Math.abs(this.rightFrontMotor.getSelectedSensorPosition(MotionMagicPIDIndex) - MotionMagicDistance) < 500);// || this.leftFrontMotor.getSelectedSensorPosition(MotionMagicPIDIndex) < -MotionMagicDistance + 6000)
    }
    
    
    
    
    public void ResestEncoder()
    {
        leftFrontMotor.setSelectedSensorPosition(0, 0, TIMEOUT_MS);
    	rightFrontMotor.setSelectedSensorPosition(0, 0, TIMEOUT_MS);
    }

/*
    public void MotionMagicInit(double distance, int backVelocity, int backAcceleration) {
    	MotionMagicDistance = distance;
    	leftFrontMotor.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder, MotionMagicPIDIndex, TIMEOUT_MS);
    	rightFrontMotor.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder, MotionMagicPIDIndex, TIMEOUT_MS);
    	
    	leftFrontMotor.selectProfileSlot(MotionMagicPIDSlot, MotionMagicPIDIndex);
    	rightFrontMotor.selectProfileSlot(MotionMagicPIDSlot, MotionMagicPIDIndex);
    	
    	leftFrontMotor.config_kP(0, MotionMagicP, TIMEOUT_MS);
    	leftFrontMotor.config_kI(0, MotionMagicI, TIMEOUT_MS);
    	leftFrontMotor.config_kD(0, MotionMagicD, TIMEOUT_MS);
    	leftFrontMotor.config_kF(0, MotionMagicF, TIMEOUT_MS);
    	
    	rightFrontMotor.config_kP(0, MotionMagicP, TIMEOUT_MS);
    	rightFrontMotor.config_kI(0, MotionMagicI, TIMEOUT_MS);
    	rightFrontMotor.config_kD(0, MotionMagicD, TIMEOUT_MS);
    	rightFrontMotor.config_kF(0, MotionMagicF, TIMEOUT_MS);
    	
    	leftFrontMotor.configMotionAcceleration(backAcceleration, TIMEOUT_MS);
    	leftFrontMotor.configMotionCruiseVelocity(backVelocity, TIMEOUT_MS);
    	
    	rightFrontMotor.configMotionAcceleration((int)(correctionR*backAcceleration), TIMEOUT_MS);
    	rightFrontMotor.configMotionCruiseVelocity((int)(correctionR*backVelocity), TIMEOUT_MS);
        
        //Do we need to reset encoders here?
    	//leftFrontMotor.setSelectedSensorPosition(0, MotionMagicPIDIndex, TIMEOUT_MS);
    	//rightFrontMotor.setSelectedSensorPosition(0, MotionMagicPIDIndex, TIMEOUT_MS);
    	
    	MotionMagicDistance *= TICKS_PER_FOOT;
    	leftFrontMotor.set(ControlMode.MotionMagic, MotionMagicDistance);
    	rightFrontMotor.set(ControlMode.MotionMagic, correctionR*MotionMagicDistance);
    }
    */

    

}
