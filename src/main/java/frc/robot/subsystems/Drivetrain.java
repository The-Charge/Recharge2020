// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.util.Units;
//import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.I2C.Port;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.controller.SimpleMotorFeedforward;
import edu.wpi.first.wpilibj.geometry.Pose2d;
import edu.wpi.first.wpilibj.geometry.Rotation2d;
import edu.wpi.first.wpilibj.kinematics.DifferentialDriveKinematics;
import edu.wpi.first.wpilibj.kinematics.DifferentialDriveOdometry;
import edu.wpi.first.wpilibj.kinematics.DifferentialDriveWheelSpeeds;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.kauailabs.navx.frc.AHRS;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;
import edu.wpi.first.wpilibj.controller.PIDController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Drivetrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonFX rightFrontMotor;
    private WPI_TalonFX rightMidMotor;
    private WPI_TalonFX rightBackMotor;
    private WPI_TalonFX leftFrontMotor;
    private WPI_TalonFX leftMidMotor;
    private WPI_TalonFX leftBackMotor;
    AHRS gyro = new AHRS(Port.kMXP);
    DifferentialDriveOdometry odometry = new DifferentialDriveOdometry(getHeading());  //should be taking in kinematics too, needs more research;
    Pose2d pose;
    SimpleMotorFeedforward feedforward = new SimpleMotorFeedforward(1.32, 2.98, .969);
    //PIDController leftPIDController = new PIDController(22.4, 0, 0);
    PIDController leftPIDController = new PIDController(22.4, 0, 0); //double check
    PIDController rightPIDController = new PIDController(22.4, 0, 0); //double check
    DifferentialDriveKinematics kinematics = new DifferentialDriveKinematics(.749676776); //Parameter is the distance between two wheels on the robot
    //DifferentialDriveOdometry odometry = new DifferentialDriveOdometry(getHeading());  //should be taking in kinematics too, needs more research

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Drivetrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        rightFrontMotor = new WPI_TalonFX(1);
        rightMidMotor = new WPI_TalonFX(2);


        
        rightBackMotor = new WPI_TalonFX(3);


        
leftFrontMotor = new WPI_TalonFX(4);


        
leftMidMotor = new WPI_TalonFX(5);


        
leftBackMotor = new WPI_TalonFX(6);


DifferentialDriveKinematics kinematics = new DifferentialDriveKinematics(.749676776); //Parameter is the distance between two wheels on the robot

DifferentialDriveOdometry odometry = new DifferentialDriveOdometry(getHeading());  //should be taking in kinematics too, needs more research

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    //Motors just to test on Plybot
    // rightFrontMotor = new WPI_TalonSRX(14);
    // rightMidMotor = new WPI_TalonSRX(2);
    // rightBackMotor = new WPI_TalonSRX(15);

    // leftFrontMotor = new WPI_TalonSRX(0);
    // leftMidMotor = new WPI_TalonSRX(5);
    // leftBackMotor = new WPI_TalonSRX(1);


    leftFrontMotor.setInverted(true);
    leftMidMotor.setInverted(true);
    leftBackMotor.setInverted(true);

    leftMidMotor.follow(leftFrontMotor);
    leftBackMotor.follow(leftFrontMotor);
    rightMidMotor.follow(rightFrontMotor);
    rightBackMotor.follow(rightFrontMotor);


    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.S
        setDefaultCommand(new TankDrive());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        pose = odometry.update(getHeading(),leftFrontMotor.getSelectedSensorPosition()/16509.93, rightFrontMotor.getSelectedSensorPosition()/16509.93); //converted encoder ticks to meters

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    public void run(double l, double r)
    {
        double leftSpeed = l;
        double rightSpeed = r;

        leftFrontMotor.set(leftSpeed);
        rightFrontMotor.set(rightSpeed);

    }

    public void stop()
    {
        leftFrontMotor.set(0);
        rightFrontMotor.set(0);
    }

    public void setPercentVBus()
    {
        leftFrontMotor.set(ControlMode.PercentOutput, 0);
        rightFrontMotor.set(ControlMode.PercentOutput, 0);
    }

       /*  getHeading() probably needs to be modified. The AHRS gyro goes from -180 to +180,
            but the gyro the original code is based on goes from 0 to 360. The "+ 180" is
            being used to normalize the gyro input  */
            public Rotation2d getHeading() {
                return Rotation2d.fromDegrees(-gyro.getAngle());  //negative because angle decreses as it goes clockwise
            }

            //returns 
            public DifferentialDriveWheelSpeeds getSpeeds()
            {
                return new DifferentialDriveWheelSpeeds(leftFrontMotor.getSelectedSensorVelocity()/9.8133*2*Math.PI*Units.inchesToMeters(3.0)/60, rightFrontMotor.getSelectedSensorVelocity()/9.8133*2*Math.PI*Units.inchesToMeters(3.0)/60); //Double check
                //Will need to add specific unit conversions here
            }

            public SimpleMotorFeedforward getFeedForward()
            {
                return feedforward;
            }

            public PIDController getLeftPIDController()
            {
                return leftPIDController;
            }

            public PIDController getRightPIDController()
            {
                return rightPIDController;
            }

            public DifferentialDriveKinematics getKinematics()
            {
                return kinematics;
            }

            public Pose2d getPose()
            {
                return pose;
            }

            public void setOutput(double leftVolts, double rightVolts)
            {
                leftFrontMotor.set(leftVolts/12);  //check our voltage range if its -1 - 1
                rightFrontMotor.set(rightVolts/12);
            }

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

