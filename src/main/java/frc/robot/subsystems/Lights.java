// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import com.ctre.phoenix.ILoopable;
import com.ctre.phoenix.CANifier;
import edu.wpi.first.wpilibj.Joystick;
import com.ctre.phoenix.Util;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Lights extends Subsystem implements ILoopable{

   

    public static CANifier canifier = new CANifier(0);
    public final static CANifier.PWMChannel kMotorControllerCh = CANifier.PWMChannel.PWMChannel2;
   
    private boolean running = true;


    

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Lights() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
   // setDefaultCommand(ChangeLights(this));

    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
       
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void onStart(){

    }

    public void onStop(){
        canifier.enablePWMOutput(kMotorControllerCh.value, false);
        running = false;
    }
    public void onLoop(){}

    public boolean isDone(){return false;}
    public String vision = "Locked";
   //how to implement the MovingAverage framework - do we need it
   
    
    public void changeLight()
    {

        if (vision.equals("Locked"))
        {
            canifier.setLEDOutput(242, CANifier.LEDChannel.LEDChannelA);
            canifier.setLEDOutput(170 ,CANifier.LEDChannel.LEDChannelB);
            canifier.setLEDOutput(53, CANifier.LEDChannel.LEDChannelC);
        }
        else{
            if(running)   //how do I access the object of the subsystem?
            {
                canifier.setLEDOutput(236, CANifier.LEDChannel.LEDChannelA);
                canifier.setLEDOutput(232, CANifier.LEDChannel.LEDChannelB);
                canifier.setLEDOutput(241, CANifier.LEDChannel.LEDChannelC);
            }
            else if(running)
            {
                canifier.setLEDOutput(185, CANifier.LEDChannel.LEDChannelA);
                canifier.setLEDOutput(242, CANifier.LEDChannel.LEDChannelB);
                canifier.setLEDOutput(61, CANifier.LEDChannel.LEDChannelC);
            } 
            else if (running)
            {
                canifier.setLEDOutput(139, CANifier.LEDChannel.LEDChannelA);
                canifier.setLEDOutput(242, CANifier.LEDChannel.LEDChannelB);
                canifier.setLEDOutput(61, CANifier.LEDChannel.LEDChannelC);
            }
            else if (running)
            {
                canifier.setLEDOutput(91, CANifier.LEDChannel.LEDChannelA);
                canifier.setLEDOutput(242, CANifier.LEDChannel.LEDChannelB);
                canifier.setLEDOutput(61, CANifier.LEDChannel.LEDChannelC);
            }
            else if (running)
            {
                canifier.setLEDOutput(48, CANifier.LEDChannel.LEDChannelA);
                canifier.setLEDOutput(201, CANifier.LEDChannel.LEDChannelB);
                canifier.setLEDOutput(56, CANifier.LEDChannel.LEDChannelC);
            }
        }
        
    }
   

    
   

}

