// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import com.ctre.phoenix.ILoopable;
import com.ctre.phoenix.CANifier;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Lights extends Subsystem implements ILoopable{

    public static CANifier canifier = new CANifier(0);
    public final static CANifier.PWMChannel kMotorControllerCh = CANifier.PWMChannel.PWMChannel2;

    private float hue;
    public float saturation;
    public float value;
    private static float rgb[] = new float[3];

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Lights() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void onStart(){}

    public void onStop(){
        canifier.enablePWMOutput(kMotorControllerCh.value, false);

    }
    public void onLoop(){}

    public boolean isDone(){return false;}
    public void HSVtoRGB()
    {
        double R, G, B;
		double H = hue;

		if (H < 0) {
			H += 360;
		}
		if (H >= 360) {
			H -= 360;
		}

		if (value <= 0) {
			R = G = B = 0;
		} else if (saturation <= 0) {
			R = G = B = value;
		} else {
			double hf = H / 60.0;
			int i = (int) Math.floor(hf);
			double f = hf - i;
			double pv = value * (1 - saturation);
			double qv = value * (1 - saturation * f);
			double tv = value * (1 - saturation * (1 - f));
			switch (i) {
				/* Red is dominant color */
				case 0 :
					R = value;
					G = tv;
					B = pv;
					break;
				/* Green is dominant color */
				case 1 :
					R = qv;
					G = value;
					B = pv;
					break;
				case 2 :
					R = pv;
					G = value;
					B = tv;
					break;
				/* Blue is the dominant color */
				case 3 :
					R = pv;
					G = qv;
					B = value;
					break;
				case 4 :
					R = tv;
					G = pv;
					B = value;
					break;
				/* Red is the dominant color */
				case 5 :
					R = value;
					G = pv;
					B = qv;
					break;
				/**
				 * Just in case we overshoot on our math by a little, we put
				 * these here. Since its a switch it won't slow us down at all
				 * to put these here
				 */
				case 6 :
					R = value;
					G = tv;
					B = pv;
					break;
				case -1 :
					R = value;
					G = pv;
					B = qv;
					break;
				/* The color is not defined, we should throw an error */
				default :
					/* Just pretend its black/white */
					R = G = B = value;
					break;
			}
		}
		/* Since we can't pass by reference, return an array */
		rgb[0] = (float) R;
		rgb[1] = (float) G;
		rgb[2] = (float) B;

		
    }
    public void HSV()
    {
        if (saturation > 1)
        {
            saturation = 1;
        }
        if (saturation < 0)
            saturation = 0;

         if (value > 1)
         value = 1;

         if (value < 0)
         value = 0;
        HSVtoRGB();
        canifier.setLEDOutput(rgb[0], CANifier.LEDChannel.LEDChannelA);
        canifier.setLEDOutput(rgb[1], CANifier.LEDChannel.LEDChannelB);
        canifier.setLEDOutput(rgb[2], CANifier.LEDChannel.LEDChannelC);

    }
    public void AnimateLEDStrip()
    {
        //On loop
        hue += 1;
        if(hue >= 360){
            hue = 0;
        }
        HSV();
        saturation = 1.0f;
        value = 0.05f;
        

    }

}

